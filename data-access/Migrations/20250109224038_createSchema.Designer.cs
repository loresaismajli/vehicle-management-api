// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using data_access;

#nullable disable

namespace dataaccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250109224038_createSchema")]
    partial class createSchema
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("models.Entities.Accident", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smalldatetime")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsGuilty")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("UserId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Accidents");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Accident in the road",
                            IsGuilty = false,
                            TotalPrice = 100m,
                            UserId = 1,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.Consumption", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<int?>("Fuel")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("Consumptions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Fuel = 50,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.Maintenance", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Maintenances");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Oil Change"
                        });
                });

            modelBuilder.Entity("models.Entities.Producer", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Producers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "ABC Corp"
                        });
                });

            modelBuilder.Entity("models.Entities.Region", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Regions");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "North America"
                        });
                });

            modelBuilder.Entity("models.Entities.Role", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Roles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "Admin"
                        },
                        new
                        {
                            Id = 2,
                            IsActive = true,
                            Name = "User"
                        });
                });

            modelBuilder.Entity("models.Entities.Service", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Number")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ServiceTypeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalPrice")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("UserId");

                    b.HasIndex("VehicleId");

                    b.ToTable("Services");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 1, 9, 23, 40, 38, 77, DateTimeKind.Local).AddTicks(1958),
                            Name = "Oil Change",
                            Number = "S001",
                            ServiceTypeId = 1,
                            TotalPrice = 100m,
                            UserId = 1,
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.ServiceType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("ServiceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Basic Service"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Advanced Service"
                        });
                });

            modelBuilder.Entity("models.Entities.User", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RegionId1")
                        .HasColumnType("int");

                    b.Property<int?>("RoleId")
                        .HasColumnType("int");

                    b.Property<string>("UserType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("RegionId1");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator<string>("UserType").HasValue("User");

                    b.UseTphMappingStrategy();

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "john.doe@example.com",
                            FirstName = "John",
                            LastName = "Doe",
                            Password = "password123",
                            PhoneNumber = "1234567890",
                            RoleId = 1
                        },
                        new
                        {
                            Id = 2,
                            Email = "jane.smith@example.com",
                            FirstName = "Jane",
                            LastName = "Smith",
                            Password = "password456",
                            PhoneNumber = "0987654321",
                            RoleId = 2
                        });
                });

            modelBuilder.Entity("models.Entities.Vehicle", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProducerId")
                        .HasColumnType("int");

                    b.Property<int?>("ProductionYear")
                        .HasColumnType("int");

                    b.Property<string>("VIN")
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("VehicleModelId")
                        .HasColumnType("int");

                    b.Property<int?>("VehicleTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProducerId");

                    b.HasIndex("VehicleModelId");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Toyota Camry",
                            ProducerId = 1,
                            ProductionYear = 2020,
                            VIN = "1HGBH41JXMN109186",
                            VehicleModelId = 1,
                            VehicleTypeId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.VehicleModel", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleModels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Camry"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Corolla"
                        });
                });

            modelBuilder.Entity("models.Entities.VehicleReport", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<DateTime?>("Date")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VehicleId");

                    b.ToTable("VehicleReports");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 1, 9, 23, 40, 38, 78, DateTimeKind.Local).AddTicks(4689),
                            Description = "Vehicle inspection report",
                            VehicleId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.VehicleType", b =>
                {
                    b.Property<int?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Sedan"
                        },
                        new
                        {
                            Id = 2,
                            Name = "SUV"
                        });
                });

            modelBuilder.Entity("models.Entities.Contractor", b =>
                {
                    b.HasBaseType("models.Entities.User");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(100)");

                    b.HasDiscriminator().HasValue("Contractor");

                    b.HasData(
                        new
                        {
                            Id = 3,
                            Email = "alice.johnson@contractor.com",
                            FirstName = "Alice",
                            LastName = "Johnson",
                            Password = "password789",
                            PhoneNumber = "1112233445",
                            RoleId = 2,
                            CompanyName = "ACME Corp"
                        });
                });

            modelBuilder.Entity("models.Entities.Employee", b =>
                {
                    b.HasBaseType("models.Entities.User");

                    b.Property<int?>("RegionId")
                        .HasColumnType("int");

                    b.Property<int?>("RegionId2")
                        .HasColumnType("int");

                    b.HasIndex("RegionId");

                    b.HasIndex("RegionId2");

                    b.HasDiscriminator().HasValue("Employee");

                    b.HasData(
                        new
                        {
                            Id = 4,
                            Email = "bob.williams@company.com",
                            FirstName = "Bob",
                            LastName = "Williams",
                            Password = "password101",
                            PhoneNumber = "5566778899",
                            RoleId = 1,
                            RegionId = 1
                        });
                });

            modelBuilder.Entity("models.Entities.Accident", b =>
                {
                    b.HasOne("models.Entities.User", "User")
                        .WithMany("Accidents")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("models.Entities.Vehicle", "Vehicle")
                        .WithMany("Accidents")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("models.Entities.Consumption", b =>
                {
                    b.HasOne("models.Entities.Vehicle", "Vehicle")
                        .WithMany("Consumptions")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("models.Entities.Service", b =>
                {
                    b.HasOne("models.Entities.ServiceType", "ServiceType")
                        .WithMany("Services")
                        .HasForeignKey("ServiceTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("models.Entities.User", "User")
                        .WithMany("Services")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("models.Entities.Vehicle", "Vehicle")
                        .WithMany("Services")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ServiceType");

                    b.Navigation("User");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("models.Entities.User", b =>
                {
                    b.HasOne("models.Entities.Region", null)
                        .WithMany("Users")
                        .HasForeignKey("RegionId1");

                    b.HasOne("models.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Role");
                });

            modelBuilder.Entity("models.Entities.Vehicle", b =>
                {
                    b.HasOne("models.Entities.Producer", "Producer")
                        .WithMany("Vehicles")
                        .HasForeignKey("ProducerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("models.Entities.VehicleModel", "VehicleModel")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleModelId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("models.Entities.VehicleType", "VehicleType")
                        .WithMany("Vehicles")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Producer");

                    b.Navigation("VehicleModel");

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("models.Entities.VehicleReport", b =>
                {
                    b.HasOne("models.Entities.Vehicle", "Vehicle")
                        .WithMany("VehicleReports")
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("models.Entities.Employee", b =>
                {
                    b.HasOne("models.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("models.Entities.Region", null)
                        .WithMany("Employees")
                        .HasForeignKey("RegionId2");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("models.Entities.Producer", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("models.Entities.Region", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("models.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("models.Entities.ServiceType", b =>
                {
                    b.Navigation("Services");
                });

            modelBuilder.Entity("models.Entities.User", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("Services");
                });

            modelBuilder.Entity("models.Entities.Vehicle", b =>
                {
                    b.Navigation("Accidents");

                    b.Navigation("Consumptions");

                    b.Navigation("Services");

                    b.Navigation("VehicleReports");
                });

            modelBuilder.Entity("models.Entities.VehicleModel", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("models.Entities.VehicleType", b =>
                {
                    b.Navigation("Vehicles");
                });
#pragma warning restore 612, 618
        }
    }
}
